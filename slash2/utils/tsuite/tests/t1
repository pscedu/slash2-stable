#!/usr/bin/perl -W
# $Id$

sub slash_conf {
	my %h = @_;

	return <<"EOF";
set port=7001;
set net=tcp10;

site \@tsuite {
	site_desc	= "slash test suite";
	site_id		= 100;

	resource mds0 {
		desc	= "first MDS";
		# \@zfspool=adam_zpool hdb
		type	= mds;
		id	= 101;
		ifs	= adamantium;
	}

#	resource io0 {
#		desc	= "first ION";
#		type	= parallel_fs;
#		id	= 102;
#		fsroot	= $h{base}/sliots.io0;
#		# \@prefmds=mds0\@tsuite
#		ifs	= stryker;
#	}

	resource io1 {
		desc	= "second ION";
		type	= archival_fs;
		id	= 103;
		fsroot	= $h{base}/sliots.io1;
		# \@prefmds=mds0\@tsuite
		ifs	= wolverine;
	}
}
EOF
}

sub cli_cmd {
	my %h = @_;

	return <<ENDCMD;
set -x

for i in \$(seq 2); do
	cp -RL $h{src} $h{fspath}/srctest || true
done
diff -rqu $h{fspath}/srctest $h{src}


exit 0

cd $h{src}/fio
make pthreads >/dev/null

perl - \$1 <<'EOS'
use IPC::Open2;
use strict;
use warnings;

my \$clienthost = \$ARGV[0];
my \$fiolog = "$h{base}/fiolog.\$clienthost";
mkdir \$fiolog or die "mkdir \$fiolog: \$clienthost\\n";

exit 0;

sub runfio {
	my (\$name, \$to, \$in) = \@_;

	print STDERR "running test \$name\\n";

	\$in =~ s/%NAME%/\$name/g;
	my \$conf = "\$fiolog/\$name.\$clienthost.fio";
	open CONF, ">", \$conf or die "\$conf: \$!\\n";
	print CONF \$in;
	close CONF;

	my \$start = time;
	system "perl $h{gdbtry} ./fio.pthreads -i \$conf";
	exit \$? if \$?;
	my \$diff = time - \$start;

	return "\$name \$diff\\n";
}

my \@res;
push \@res, runfio("fio16t16x.2G", 15, <<EOF);
group MyReadWrite {
	files_per_dir	= 4;
	tree_depth	= 0;
	tree_width	= 0;
	pes		= 4;
	test_freq	= 0;
	block_freq	= 0;
	path		= "$h{fspath}/%NAME%.\$clienthost";
	output_path	= "\$fiolog";
	filename	= %NAME%;
	file_size	= 20m;
	block_size	= 128k;
	thrash_lock	= yes;
	samedir		= yes;
	verify		= yes;
	barrier		= yes;
	iterations	= 1;
	iotests (
		WriteEmUp	[openwr:write:close]
	)
}
EOF

my \$infh;
open2(">&STDOUT", \$infh, "$h{doresults}");
print \$infh \@res;
close \$infh;
wait;

print "test completed\\n";

sleep 1200;

EOS

ENDCMD
}

our $logbase= "/home/slog";
our $rootdir = "/home/sltest";
our $giturl = 'https://github.com/pscedu/slash2.git';
our $intvtimeout = 60*7;	# single op interval timeout
our $runtimeout = 60*60*8;	# client run duration
our $src = "/home/yanovich/code/advsys/p";
our $global_env = {
};

our @cli = (
	{
		host => "adamantium",
		env => {
			MDS	 => "mds0\@tsuite",
			PREF_IOS => "io1\@tsuite"
		}
	},
);

my $localcfg = __FILE__ . ".local";
require $localcfg if -e $localcfg;

1;
