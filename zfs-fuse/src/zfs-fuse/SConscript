import os

Import('env')

VariantDir('build-libslzfsfuse', '.', duplicate = 0)

objects = []

objects.append('cmd_listener.c')
objects.append('ptrace.c')
objects.append('util.c')
objects.append('zfs_acl.c')
#objects.append('zfs_ctldir.c')
objects.append('zfs_dir.c')
objects.append('zfs_ioctl.c')
objects.append('zfs_log.c')
objects.append('zfs_replay.c')
objects.append('zfs_rlock.c')
objects.append('zfs_vfsops.c')
objects.append('zfs_vnops.c')
objects.append('zfsfuse_socket.c')
objects.append('zvol.c')

cpppath = []
cpppath.append('#lib/libavl/include')
cpppath.append('#lib/libnvpair/include')
cpppath.append('#lib/libumem/include')
cpppath.append('#lib/libzfscommon/include')
cpppath.append('#lib/libsolkerncompat/include')

ccflags = Split('-D_KERNEL')

libs = Split('rt pthread fuse dl z aio crypto')

sl_obj = ['build-libslzfsfuse/' + o for o in objects]

objects.append('fuse_listener.c')
objects.append('main.c')
objects.append('zfs_operations.c')
objects.append('#lib/libzpool/libzpool-kernel.a')
objects.append('#lib/libavl/libavl.a')
objects.append('#lib/libnvpair/libnvpair-kernel.a')
objects.append('#lib/libsolkerncompat/libsolkerncompat.a')
objects.append('#lib/libumem/libumem.a')
objects.append('#lib/libzfscommon/libzfscommon-kernel.a')
env.Program('zfs-fuse', objects, CPPPATH = env['CPPPATH'] + cpppath, LIBS = libs, CCFLAGS = env['CCFLAGS'] + ccflags)

sl_obj.append('zfs_operations_slash.c')

sl_ccflags = ccflags + ['-DZFS_SLASHLIB']

f = os.popen('cd ../../.. && make printvar-FUSE_INCLUDES')
cpppath.extend(o[2:] for o in Split(f.readline().strip()))
# + Split('-Wall -W')
f.close()

env.StaticLibrary('libzfs-fuse', sl_obj, CPPPATH = env['CPPPATH'] + cpppath,
    LIBS = libs, CCFLAGS = env['CCFLAGS'] + sl_ccflags)
