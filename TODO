$Id$

general reminders
- watch out for sizeof(type var[0])
- constify RPC replies in clients and requests in servers
- check all bulkserver()'s for free_desc()
- ensure file permissions in code aren't too permissive
- investigate pthread_rwlocks for things like trees and large lists
- watch out for "a - b" in cmp functions overflowing, use CMP() instead
- investigate if our sched_yield() calls are correct
- watch out for structure reinitialization (e.g. LOCK_INIT twice)
   maybe do:
	#define INIT(s)							\
		do {							\
			if (s->magic == MAGIC)				\
				assert(s->field == VALUE);		\
			s->magic = MAGIC;				\
			s->field = VALUE;				\
		while (0)
- remove XXX comments
- keep "make build > /dev/null" clean
- check memset() for bad sizes sizeof(pg) vs. sizeof(*pg): use PFL_ALLOC_OBJ()
- psc_alloc(p, 0, ...) will always return NULL, deal with it
- convert the localmem API to just use __thread, unless __thread isn't
  supported, then convert __thread to the localmem API
- prefer __inline over inline for pre-C99 compatibility
- void *pri data members can be removed on structures to save
  memory, as you can allocate >sizeof(struct) and point the
  private data pointer past
- ensure no mp RPC message bodies are used after a pscrpc_req_finished()
- check -Wuninitialized and others
- no strcpy, strcat, gets, sscanf without bounds
- nbreqset req callbacks run in conjunction with any req interpret reply callbacks.
  this is confusing because the async_args is identical in both callbacks.
- is it safe to pscrpc_request_finished() in an interpret callback??
- ensure psc_free(p, PAF_LOCK, sz) has sz always as size_t
- ensure any void * used as hash table idmemb are uint64_t for 32-bit
   - add check: assert(sizeof() == 8)
- dont access nseen on lc/mlist without a lock
- avoid globals for NUMA performance
- is gettimeofday() a source of system call overhead?
- check -s hashtables for bucket overfilling
- prefer enum to #define for values since they are available within gdb
- callerinfo should be const everywhere
- stop reinpretation of args in macros with stack vars
- check for mp->rc against ENOENT, etc. (all errnos) without negative signs
- scan for leaks for pthread_mutex and pthread_cond
- our tree api (BSD sys/tree.h) does not allow duplicate keys, eradicate INSERT
- ensure reentrancy of 'static' variables in functions
- the proper way to do callerinfo:

	void
	myfunc(const struct pfl_callerinfo *pci, ...)
	{
		...
	}

  everything is handled under the hood by pcpp

- use psc mem wrappers for:
	malloc
	calloc
	realloc
	free
	strdup
	asprintf
	posix_memalign
	strndup

make
- rename ROOTDIR -> PROJ_BASE
- make spins if no SRCS or SUBDIRS
- setting variables such as CFLAGS on the command line recursively
  propagates all additive assignments in subdirs

- fix cscope: remove the curdir when the parent includes it
- work on `install' target for the SLASH2 release

rename
- rename RSX_ALLOCREP to something that doesnt mean 'allocate' and
  RSX_NEWREQ to ALLOC to make alloc grepping easier

pfl
- ctlapi GETTREE?
- pfl: use "psc_/pfl_" prefix and "_mt" (multithread-safe) postfix
- for psclog(), add extensibility mechanism for fmtstr,
  allowing app-specific callbacks (e.g. %r for zest clients)
- add a pscthr_get() check in pscalloc and test
- psclog format specifier: relative log timestamp difference
- investigate proper control socket permissions checks in ctlapi.
  regular users should be able to read some stats but only root users
  should be able to issue exit commands, etc.  TCP sockets should
  inspect remote port to determine "authorization"
- should hash tables be enforced by to n^^2-1 ??
- rename stree to vtree (variable number of children per branch)
- add custom sleep intervals for timerthr API
- dynamically auto resizeable hash tables
- fix endianess in RPCs
- add API for PSC mem failure, so we can plug into the memhandling
  paths when asprintf() fails instead of centralizing the logic over
  malloc().
- add struct members to hdrclean.pl
- add a new vlock API:
    (o) agnostic to underlying type (spin, etc.)
    (o) has a flag to mark for processing of critical
	section and wakeup when leaving section and wakes up
	others waiting
- in pscrpc_nbset_add(), try to push the RPC;
  if failure, do a reap(), and try once more
- change return codes in ctlapi to be two constants:

    PSC_CTLRET_OK - continue processing
    PSC_CTLRET_BAIL - drop the connection

  give them obscure values (42,43) and ensure they are returned

  better way: if psc_ctlmsg_send() fails, use setjmp to exit call stack
  return to after ctl loop
- let caller worry about memory for vbitmaps, don't return pointers
- bail if multiwait_addcond() fails, its a mem condition (dynarray)
  that should be remedied by shrinking pools
- when ppm_total is set less than lc_size for !PPMF_AUTO, set
  ppm_max and check this value in other places to eventually
  decrease pool size
- consolidate naming conventions for initializers:
	PSC_WAITQ_INIT -> WAITQ_INIT
	INIT_PSC_LISTENTRY -> INIT_LISTENTRY
  which is OK since they aren't translation unit symbols
- eliminate flags arg to pscthr_init()
- in mguard, check the flags in realloc/free match alloc (PAF_LOCK, ALIGN)
- is pcpp the problem with function args mid-wrapping?
- count spinlocks and mutexes held before:
	- waitq (should be holding one)
	- rpc (should be holding none)
- rename SLASH/ZEST_MODULES to COMPONENTS to disassociate from PFL MODULES
- rename PPMF_NOLOCK -> PPMF_NOPIN, PAF_LOCK -> PAF_PIN
- for odtable(1), print stats as default behavior
- add function call hierarchy specifier to psclog
    - libunwind
- mmap() mprotect()'d memory in memguard
- pool auto threshold is broken
- add provisions to dynarray to detect multiple adds without an
  ensurelen and notify user to possible optimization
- tie 'make doc' to 'make regen'
  - the slow part is the svn log to find the last date revision; maybe
    find a way of extracting this part out...
  - the regular part should be built into the 'all' target
- when processing .l and .y rules, propagate CFLAGS from the .l FILE var
  into the obj/*.c file var
- libpthread rwlock is broken on free/openbsd!  writers vs readers
  priority problems, the entire implementation needs rewritten
- mutex is broken on freebsd -- psc_mutex_haslock() implemented with
  pthread_mutex_timedlock() returns ETIMEDOUT instead of EDEADLK
- differentiate pll abbreviation for log level vs. locked list
- parse thr(-.*)? for connthr-foo not matching 'thr$' for thread names in ctl parsing
- list head vs list entry vs hash entry etc - magic numbers should differ
- tests/rwlock is broken on mymichelle with DEBUG=0
- document CTL_SOCK_FILE for daemons and *ctl utils
- use CLOCK_MONTONIC in pscrpc_waitevent() to waitq_timedwait()
- deploy socket_getpeercred all through ctlapi
	- especially in ctl command interface (e.g. 'msctl stop')
- in RPC layer, add a syserrno -> PFLERR_* checker/portability
  translation layer
- pfl/compat.h must have universal values for errno constants, so avoid this
  approach altogether and use portable constants instead
- add counter measurements to spinlock to discern which critical
  sections to convert to mutex, or at least have profiling separate into
  each alias routine (e.g. BMAP_LOCK() to inform that we wait on bmaps
  too much, and maybe want to convert to mutex)
- rename '_pci' suffix functions to '_' prefix
- does 'make install' install zfs?
- pscthr_yield() should only be called when there is no work to do in a
  thread's main loop to cut down on context switches when there is known
  work to do
- make sure there aren't warnings that are -Werror in compat/* pickle
  tests
- make sure in `psclog("%d", errno)' there are no ways errno can be
  modified by pfl_tls_get()
- never cast sizeof() to int
- add some accounting to hash table ID collisions, where resort to the
  cmpf is required

lnet
- use TLS buffers for libcfs_nid2str() to avoid NUMA contention
- merge LNET_ACCEPT_PORT and USOCK_CPORT

- pcpp:
  if an arg is a pointer, dont trace an integer version of it in PFL_ENTER()

