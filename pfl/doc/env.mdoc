.\" $Id$
.Sh ENVIRONMENT
.Bl -tag -width 3n
.\" %PFL_LIST Ev {
.\"	exists $DATA->{env} ? %{ $DATA->{env} } : (),
.\"	exists $mods{ctl} ? (
.\"		CTL_SOCK_FILE => <<'EOF',
.\"			Override the default control socket file path.
.\"			EOF
.\"	) : (),
.\"	exists $mods{lnet} ? (
.\"		LNET_ACCEPT => <<'EOF',
.\"			Specify constraints on which connections are accepted.
.\"			May be
.\"			.Ic secure
.\"			for allowing connections only from
.\"			.Tn TCP
.\"			port 1023 and lower
.\"			.I all
.\"			to allow all, or
.\"			.Ic none
.\"			to disallow connections from user processes.
.\"			Defaults to
.\"			.Ic all .
.\"			EOF
.\"		LNET_ACCEPT_BACKLOG => <<'EOF',
.\"			Specify the
.\"			.Xr listen 2
.\"			queue depth.
.\"			Defaults to 127.
.\"			EOF
.\"		LNET_ACCEPT_PORT => <<'EOF',
.\"			Specify an alternate local
.\"			.Xr tcp 7
.\"			port for listening network sockets created by the Lustre networking
.\"			stack.
.\"			Defaults to 988.
.\"			EOF
.\"		LNET_ACCEPT_TIMEOUT => <<'EOF',
.\"			Specify the number of seconds to wait for activity after a socket is
.\"			accepted.
.\"			Defaults to 5 seconds.
.\"			EOF
.\"		LNET_IP2NETS => <<'EOF',
.\"			The list of
.\"			.Xr ip 4
.\"			networks and corresponding Lustre network names.
.\"			EOF
.\"		LNET_NETWORKS => <<'EOF' .
.\"			The list of networks and interfaces known to the Lustre networking
.\"			stack.
.\"			EOF
.\"		    (exists $DATA->{lnets_note} ? $DATA->{lnets_note} : "") .
.\"		    <<'EOF',
.\"			.Pp
.\"			Examples:
.\"			.Bd -literal -offset 3n
.\"			tcp1(eth0),tcp1(eth1)
.\"			sdp4(ib0)
.\"			.Ed
.\"			EOF
.\"		LNET_ROUTES => <<'EOF',
.\"			The list of Lustre routes for interconnecting networks.
.\"			.Pp
.\"			Examples:
.\"			.Bd -literal -offset 3n
.\"			tcp1 3@ptl1
.\"			tcp1 [2560,2563,2568,2571,2572,2575]@ptl0
.\"			.Ed
.\"			EOF
.\"		USOCK_CPORT => <<'EOF',
.\"			Specify an alternate remote/peer
.\"			.Xr tcp 7
.\"			port for connecting networking sockets.
.\"			Defaults to 988.
.\"			EOF
.\"		USOCK_FAIR_LIMIT => <<'EOF',
.\"			Specify the number of packets that can be received or transmitted
.\"			without calling
.\"			.Xr poll 2 .
.\"			Defaults to one.
.\"			EOF
.\"		USOCK_MIN_BULK => <<'EOF',
.\"			Specify the smallest bulk size permissible.
.\"			Defaults to 1024.
.\"			EOF
.\"		USOCK_NPOLLTHREADS => <<'EOF',
.\"			Specify the number of threads to spawn to check and perform activity from
.\"			sockets.
.\"			Defaults to the minimum of the number of cores available on the system
.\"			or one quarter of the number of file descriptors available to the
.\"			process.
.\"			EOF
.\"		USOCK_PEERTXCREDITS => <<'EOF',
.\"			Specify the number of concurrent sends to any single peer.
.\"			Defaults to 8.
.\"			EOF
.\"		USOCK_POLL_TIMEOUT => <<'EOF',
.\"			Specify the number of seconds to wait for activity on a socket before
.\"			temporarily tending to other duties and trying again.
.\"			Defaults to one.
.\"			EOF
.\"		USOCK_PORTPID => <<'EOF' .
.\"			Specify whether to fabricate Lustre
.\"			.Tn PID
.\"			values from a connecting peer's originating
.\"			.Tn TCP
.\"			port instead of from the value specified by the peer during connect.
.\"			EOF
.\"			"Defaults to " . (exists $DATA->{portpid} ? "on" : "off") . ".",
.\"		USOCK_SOCKBUFSIZ => <<'EOF',
.\"			Specify an alternative value for the amount of data that can either be
.\"			queued awaiting tranmission or accumulate in a socket by the kernel
.\"			awaiting reception by a process.
.\"			Defaults to whatever value is initialized by the operating system.
.\"			EOF
.\"		USOCK_SOCKNAGLE => <<'EOF',
.\"			Specify whether to enable the Nagle algorithm on sockets.
.\"			Defaults to disabling the Nagle algorithm.
.\"			EOF
.\"		USOCK_TIMEOUT => <<'EOF',
.\"			Specify the number of seconds before no response on a socket triggers a
.\"			drop by the networking stack.
.\"			Defaults to 50 seconds.
.\"			EOF
.\"		USOCK_TXCREDITS => <<'EOF',
.\"			Specify the total number of concurrent sends accumulated across all
.\"			peers.
.\"			Defaults to 256.
.\"			EOF
.\"	) : (),
.\"	exists $mods{pflenv} ? (
.\"		qq{PSC_DUMPSTACK Pq debugging} => <<'EOF',
.\"			When segmentation violations or fatal error conditions occur, try to
.\"			print a stack trace if this variable is defined.
.\"			EOF
.\"		PSC_LOG_FILE => <<'EOF',
.\"			This path specifies the file name where log messages are written.
.\"			The following tokens are replaced in the file name specified:
.\"			.Pp
.\"			.Bl -tag -offset 3n -width 6n -compact
.\"			.It Cm %t
.\"			the number of seconds since the Epoch
.\"			.It Cm %%
.\"			a literal
.\"			.Sq %
.\"			character
.\"			.El
.\"			EOF
.\"		PSC_LOG_FORMAT => <<EOF,
.\"			This
.\"			.Xr printf 3 Ns -like
.\"			value is prepended to each log message reported.
.\"			The following specifiers are recognized
.\"			.Pq not all may be applicable :
.\"			.Pp
.\"			.Bl -tag -offset 3n -compact -width 6n
.\"			.It Ic A
.\"			RPC peer address
.\"			.It Ic B
.\"			source code file base name
.\"			.It Ic D Ns Aq Ar fmt
.\"			.Xr strftime 3 Ns -like
.\"			format of time
.\"			.It Ic F
.\"			source code function name
.\"			.It Ic f
.\"			source code file full path name
.\"			.It Ic H
.\"			full system host name
.\"			.It Ic h
.\"			short system host name
.\"			.It Ic I
.\"			.Xr pthread 3
.\"			.Tn ID
.\"			of thread which generated log message
.\"			.It Ic i
.\"			system
.\"			.Tn ID
.\"			of daemon thread which generated log message
.\"			.It Ic L
.\"			numeric level of log message importance
.\"			.It Ic l
.\"			source code file line number
.\"			.It Ic P
.\"			file system request's originating process'
.\"			.Tn PID
.\"			.It Ic N
.\"			daemon executable file base name
.\"			.It Ic n
.\"			symbolic thread name which generated log message
.\"			.It Ic r
.\"			.Tn MPI
.\"			rank of process
.\"			.It Ic S
.\"			function call stack with frames separated by\n.Sq :\\&
.\"			.It Ic s
.\"			seconds since Epoch
.\"			.Pq same as Li %D\\*(Lt%s\\*(Gt
.\"			.It Ic t
.\"			subsystem
.\"			.Tn ID
.\"			which generated log message
.\"			.It Ic T
.\"			subsystem name which generated log message
.\"			.It Ic U
.\"			file system request's originating process' user
.\"			.Tn ID
.\"			.It Ic u
.\"			microseconds into current second when generated
.\"			.It Ic X
.\"			file system request's originating process'
.\"			executable name
.\"			.El
.\"			.Pp
.\"			Examples:
.\"			.Bd -literal -offset 3n
.\"			[%D<%s>:%06u %n %F %l]
.\"			.Ed
.\"			EOF
.\"		PSC_LOG_LEVEL => <<'EOF' .
.\"			Each log message has an associated
.\"			.Dq level
.\"			numeric value which can be used to filter granularity of importance.
.\"			This environment variable specifies the minimum level of importance
.\"			necessary for messages to be reported.
.\"			.Pp
.\"			The following values are recognized:
.\"			.Pp
.\"			.Bl -tag -compact -offset 3n -width 13n
.\"			EOF
.\"		    build_list(
.\"				"0 , none"		=> "No logging",
.\"				"1 , error"		=> "Recoverable failures",
.\"				"2 , warn"		=> "Something wrong which requires attention\n.Pq default",
.\"				"3 , notice"		=> "Something unusual which recommends attention",
.\"				"4 , info"		=> "Informational messages",
.\"				"5 , diag"		=> "Diagnostics",
.\"				"6 , debug"		=> "Debugging messages",
.\"				"7 , vdebug"		=> "Verbose debugging messages",
.\"				"8 , trace , all"	=> "Full trace messages"
.\"		    ) . ".El",
.\"		qq{PSC_LOG_LEVEL_ Ns Ar subsys} => <<'EOF' .
.\"			Like
.\"			.Ev PSC_LOG_LEVEL ,
.\"			but applies only to the given
.\"			.Ar subsys .
.\"			.Pp
.\"			.Ar subsys
.\"			may be one of the following:
.\"			.Pp
.\"			.Bl -tag -compact -offset 3n -width 13n
.\"			EOF
.\"		    build_list(
.\"			exists $DATA->{subsys} ? %{ $DATA->{subsys} } : (),
.\"			def	=> "Default",
.\"			mem	=> "Memory allocations and releases",
.\"			exists $mods{rpc} ? (
.\"			  lnet	=> "Lustre networking stack",
.\"			  rpc	=> "Network remote procedure calls"
.\"			) : ()
.\"		    ) .
.\"		    <<'EOF',
.\"			.El
.\"			.Pp
.\"			Examples:
.\"			.Bd -literal -offset 3n
.\"			PSC_LOG_LEVEL_mem=debug
.\"			.Ed
.\"			EOF
.\"		PSC_MAX_NMEMMAPS => <<'EOF',
.\"			On Linux, specify the number of memory maps the process address space is
.\"			allowed to be divided into via
.\"			.Pa /proc/sys/vm/max_map_count .
.\"			Defaults to one million.
.\"			EOF
.\"		qq{PSC_SYSLOG} => <<'EOF',
.\"			Set to non-zero to send all log messages to
.\"			.Xr syslog 3
.\"			EOF
.\"		qq{PFL_SYSLOG_PIPE} => <<'EOF',
.\"			Set to non-zero to launch a process that forwards all log messages
.\"			to the given shell pipeline, usually
.\"			.Dq logger .
.\"			EOF
.\"		qq{PFL_SYSLOG_IDENT} => <<'EOF',
.\"			Set to a custom value to pass as the
.\"			.Ar ident
.\"			parameter to
.\"			.Xr openlog 3
.\"			.Po used when
.\"			.Ev PFL_SYSLOG
.\"			is enabled
.\"			.Pc .
.\"			The following tokens are replaced in the value specified:
.\"			.Pp
.\"			.Bl -tag -offset 3n -width 6n -compact
.\"			.It Cm %n
.\"			the program (binary) name
.\"			.El
.\"			EOF
.\"		qq{PSC_SYSLOG_ Ns Ar subsys} => <<'EOF',
.\"			Set to non-zero to send log messages from the given
.\"			.Ar subsys
.\"			to
.\"			.Xr syslog 3
.\"			in addition to
.\"			.Em stderr .
.\"			EOF
.\"	) : (),
.\" }%
.El
